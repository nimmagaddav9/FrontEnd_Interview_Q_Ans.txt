React Js Interview Question

1. What is React js ?

    ReactJS is the JavaScript Library.
    Facebook
    ReactJS used to develop web applications.
    - we will develop ReactJS applicatons in two ways.

        1) JSX
            (JavaScript and XML)
            JSX won't follow the oops
        2)TypeScript
            Programming Language
            Microsoft
            TypeScript follows the OOPS.

2. What is difference between virtual DOM and shallow DOM, DOM in React js
	- In Virtual DOM line of code is changed. Processing done in change line of code.
	- Real DOM it will process the whole code. 
    - Virtual DOM is faster then real DOM.

In React.js, the DOM (Document Object Model) represents the structure of your web page. Manipulating the DOM directly can be slow, 
so React uses two different techniques to optimize this process: the Virtual DOM and Shallow Rendering
Key Differences:
Purpose: Virtual DOM is for optimizing performance during updates, while Shallow Rendering is for testing components in isolation.
Scope: Virtual DOM represents the entire application, while Shallow Rendering only renders a single component one level deep.
DOM Interaction: Virtual DOM interacts with the real DOM, while Shallow Rendering doesn't.

3. What is controlled and uncontrolled component in React js?
Controlled component - form data can be handled react.
Uncontrolled component - form data can be handled by DOM.

4. What is hooks in React js?
16.8.They let you use state and other React features without writing a class. 
Because of this, class components are generally no longer needed. 
Although Hooks generally replace class components, there are no plans to remove classes from React.

useState

useEffect

useContext

useReducer

useMemo

useCallback

useRef

useState: Manages state in functional components.  
useEffect: Manages side effects in functional components. 
useContext: Consumes context in functional components.  
useReducer: Manages state with a reducer function. For more complex state management
useRef: Accesses DOM elements or stores mutable values.  
useCallback: performance improvement usecase  
useMemo: performance improvement usecase

5. What is jsx, babel, webpack?

JSX stands for JavaScript XML. 
It's a syntax extension for JavaScript that allows you to write HTML-like structures within your JavaScript code.

Babel is the inbuilt tool of ReactJS, used to convert the "JSX" or "TypeScript" to Equivalent "JS".

Webpack takes all your JavaScript, CSS, images, and other assets and combines them into a few optimized files that can be easily loaded by a browser.


6. What is Redux?
used to implement the "state management".
We have redux thux, redux saga.
Redux thunx is an outdated library.
Saga is Advanced library.

7. What is reducer, action, store in Redux?
reducer - Business logic
Input parameters --> Actions.
Request method is called Dispatch
Response method is called Subscribe.
Store - Main Server

8. What is middleware in Redux?
Middleware in Redux is a function that allows users to modify actions and state changes before they reach the reducer. 
It's a key extension point that allows users to customize the behavior of Redux's dispatch function. 

9. Explain data flow in Redux?

Redux uses a "one-way data flow" app structure
The UI dispatches an action. The store runs the reducers, and the state is updated based on what occurred. The store notifies the UI that the state has changed.

10. What is Redux-Thunk
Redux Thunk is a middleware that allows you to write functions that interact with a Redux store. 
These functions are called "thunks" and are used to perform asynchronous actions, such as making HTTP calls.

11. What is Redux-Saga ?
Redux-Saga is a middleware library for Redux that manages side effects in JavaScript applications. 
It's designed to make it easier to handle complex data flows and side effects. 

12. Difference between Redux-thunk and Redux-saga ?
Both Redux Thunk and Redux Saga take care of dealing with side effects. 
In most of the scenarios, Thunk uses Promises to deal with them, whereas Saga uses Generators. 
Thunk is simple to use and Promises are familiar to many developers,
Sagas/Generators are more powerful but you will need to learn them. 
But both middleware can coexist, so you can start with Thunks and introduce Sagas when/if you need them.

13. Difference between class component and function component?
        Functional Components                                                                              Class Components
        
        They are declared as a JavaScript function.                                                       Class Components are defined using JavaScript classes.
        They are stateless component, but with the help of hooks, they can now manage state also.         They are stateful components by using the lifecycle methods.
                                                                                                          The render method in a class component is responsible for returning JSX.


14. How can we implement componentWillUnmount in function component?

    To implement the equivalent of componentWillUnmount in a React function component, you use the useEffect hook and return a cleanup function within it; 
    anything inside that returned function will execute when the component is unmounted. 


15. useEffect,UseState, useMemo, useCallback hooks in Details

These are essential hooks in React for managing state, side effects, and optimizing performance. Let's dive into each:
1. useState:
Purpose: Manages state within functional components.
Syntax:
JavaScript

const [state, setState] = useState(initialState);
Explanation:
state: A variable holding the current state value.
setState: A function to update the state value.
initialState: The initial value of the state.
Example:
JavaScript

import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}

2. useEffect:
Purpose: Performs side effects in functional components, like data fetching, subscriptions, or manual DOM manipulations.

Syntax:
JavaScript

useEffect(() => {
  // Side effect logic
}, [dependencies]); 

Explanation:
The first argument is a function containing the side effect logic.
The second argument (optional) is an array of dependencies. The effect will re-run if any of these dependencies change.
Example:
JavaScript

import React, { useState, useEffect } from 'react';

function DataFetcher() {
  const [data, setData] = useState([]);

  useEffect(() => {
    fetch('https://api.example.com/data')
      .then(response => response.json())
      .then(data => setData(data));
  }, []); // Empty dependency array means it runs only once on mount

  return (
    <ul>
      {data.map(item => (
        <li key={item.id}>{item.name}</li>
      ))}
    </ul>
  );
}

3. useMemo:
Purpose: Memoizes the result of a computation, preventing unnecessary recalculations.

Syntax:
JavaScript

const memoizedValue = useMemo(() => {
  // Computation logic
}, [dependencies]); 

Explanation:
The first argument is a function that returns the computed value.
The second argument is an array of dependencies. The computation will only re-run if any of these dependencies change.

Example:
JavaScript

import React, { useMemo } from 'react';

function ExpensiveCalculation({ num }) {
  const computedValue = useMemo(() => {
    // Perform expensive calculation here
    return num * num;
  }, [num]);

  return <p>Result: {computedValue}</p>;
}

4. useCallback:
Purpose: Memoizes a function, preventing unnecessary re-creation of the function instance.
Syntax:
JavaScript

const memoizedCallback = useCallback(() => {
  // Function logic
}, [dependencies]); 

Explanation:
The first argument is the function to be memoized.
The second argument is an array of dependencies. The function will only be re-created if any of these dependencies change.

Example:
JavaScript

import React, { useCallback } from 'react';

function Button({ onClick, label }) {
  const handleClick = useCallback(() => {
    onClick();
  }, [onClick]);

  return <button onClick={handleClick}>{label}</button>;
}


16. Explain lifecycle method in React js

Lifecycle methods in React are special methods that get called at different stages of component's lifecycle.
Mounting: When a component is being inserted into the DOM.
Updating: When a component's state or props change.
Unmouting: when a component is being removed from the DOM.

class LifecycleDemo extends React.Component{
    componentDidMount(){
        console.log("component mounted"); //render once only.
    }
    componentDidUpdate(prevProps, prevState){ //gives prevProps and prevState
        console.log("component updated"); 
    }

    componentWillUnmount(){
        console.log("component will unmount"); //cleanup things
    }

    render(){
        return <div> Lifecycle method</div>
    }
}


17. What is difference between export default and export in React js?

    In React (and JavaScript in general), both export default and export are used to make variables, functions, or classes available for use in other files.

18. What is portal in React js?
    In React, a portal is a way to render a component outside of its parent component's DOM hierarchy. 
    This means you can render a component in a completely different part of the DOM tree, even outside the root React application container.

17. What is reconciliation in React js?
    Reconciliation is the process React uses to update the DOM efficiently.
    It involves comparing the new Virtual DOM with the previous one and determining the minimum number of changes needed to update the actual DOM.

18. What is useRef in React js?
    The useRef hook is used to access and interact with DOM elements directly and to persist mutable values across renders without causing re-renders.

19. What is server side render in React js?
    Server-side rendering (SSR) in React.js is a technique where the initial rendering of a React component happens on the server, instead of the client's browser. 
    The server sends the rendered HTML to the client, which then takes over and hydrates the HTML with JavaScript to make it interactive.


20. What is useStrict in React js
    In React, StrictMode is a development-only tool that helps you write better and more robust code. 
    It does this by performing additional checks and warnings that highlight potential problems in your application.

21. What is fragment in React js
    In React, a fragment is a way to group multiple children's elements.
    Using a Fragment prevents the addition of unnecessary nodes to the DOM.

        <Fragment>
            <div>vijay</div>
            <div>reactjs</div>
        </Fragment>

22. What is react router in React js?
    
    React Router: React Router is a library for handling routing and enables navigation and rendering of different component based on the URL.

23. What is node module in React js
    In React.js, a Node module is a reusable piece of JavaScript code that can be included in your project to provide specific functionality.
    Node_modules –libraries are present inside the node modules.


24. What is the default localhost server port in react js.
    The default localhost server port in React.js is 3000.
    This means that when you start your development server using npm start, your application will typically be accessible at http://localhost:3000/ in your web browser.

25. how can we change the local server port
    You can change the local server port in React.js in a few ways:
    1. Using the PORT environment variable:
    Directly in the command line.
    Code

   PORT=3001 npm start
    In your package.json.
    Code

   "scripts": {
     "start": "PORT=3001 react-scripts start"
   }
    2. Using the .env file:
    Create a .env file in the root of your project.
    Add the following line:
    Code

    PORT=3001
    Now, when you run npm start, it will use port 3001.
    3. Using cross-env (for Windows compatibility):
    Install the cross-env package.
    Code

    npm install cross-env --save-dev
    Update your package.json scripts.
    Code

   "scripts": {
     "start": "cross-env PORT=3001 react-scripts start"
   }


26. What is high order component in React js
    A Higher-Order Component (HOC) is a function that takes a component and returns a new component with added functionality.
    HOCs are used for reusing component logic and enhancing components with additional behavior.

27. What is pure component in React js
    In React, a pure component is a component that only re-renders if its props or state have changed. 
    This is in contrast to regular components, which will re-render even if their props or state haven't changed.

28. What is difference state and props in React js
    button --> counter value  1-->2 --> 3 value is stored in state.

    In React, state is an object that represents the parts of the app that can change. 
    Each component can have its own state, which can be managed within the component and used to render the UI.
    When the state changes, React re-renders the component to reflect the new state.
    Props(properties) are way to pass data from a parent component to a child component.


29. How to optimize React js app
    Using useMemo and useCallback to memoize expensive calculations and functions.
    Implementing shouldComponentUpdate or using React.memo for Pure Components.
    Code Splitting and lazy loading.

30. What is difference between React js and Angular js

React and Angular both are used to create single page UI applications using components.

React                                                                        Angular

1. React is a Javascript Library.                                           1. Angular is a complete Framework.
2. React uses virtual DOM which makes it faster.                            2. Angular uses a real DOM.
3. React is smaller in size and lightwight and therefore faster sometime.   3. Angular is bigger because it is a complete framework.
4. React depends on external libraries for many complex features, so        4. Since Angular is a complete framework, therfore it provide built-in support for features like routing, forms, validation and HTTP requests.
developer has to write many lines of code for complex functionalities

5. React is simple to learn and more popular than Angular.                  5. Angular is slightly difficult to learn as it has Typescipt, OOPS concept and many more thing.


31. What is prop drilling in React js how to overcome it?
Prop drilling is the process of passing down props through multiple layers of components.
5 ways to avoid Prop Drilling

1. Using Context API
2. using Redux
3. using Component Composition
4. using Callback Functions
5. Using Custom Hooks

32. What is context api in React js?
Context API in React provides a way to share values(like data or functions) between components without having 
to pass props through every level of the component tree. It is used to avoid the prop drilling.


33. What is super, constructor, render function in React js?

super keyword is used in the constructor of a class component to call the constructor of the parent class.
This is necessary to ensure that the initialization logic of the parent class is executed.

Constructor()

constructor is a special method that is called when an instance of the class is created.
Constructor is used to intializing the component's state or performing any setup that is needed before the component is rendered.

Render() method returns the React elements that will be rendered to the DOM.

HTML interview question

34. What is <!Doctype html> in Html5
In HTML5, "<!DOCTYPE html>" is a declaration at the beginning of an HTML document that tells the web browser the document is written using the HTML5 standard, 
essentially instructing the browser to render the page using the latest HTML rules and features;
it's considered a "Document Type Declaration" and is always the first line of code in an HTML file. 


35. What is difference between div and span in Html
A div element is used for block-level organization and styling of page elements,
whereas a span element is used for inline organization and styling.


36. What is semantic tags and non semantic tags in Html

In HTML, "semantic tags" are elements that clearly define the meaning of the content they enclose, indicating its role on the page, 
while "non-semantic tags" are elements like <div> and <span> that simply hold content without conveying any specific meaning about what that content represents; essentially, 
semantic tags provide context and structure to the content, while non-semantic tags are just containers for styling purposes. 


Tags like <header>, <nav>, <article>, <section>, and <footer> are considered semantic because they explicitly describe the purpose of the content within them. 

37. What is difference between html and html5
Unlike older versions of HTML, which allowed you to create primarily static sites that needed to be spiced up with CSS and JavaScript,
HTML5 is much more dynamic and includes multimedia elements. 
It natively supports video and audio, and you can even make games or animations with it.



38. What is Iframe tag in Html5?
An inline frame (iframe) is a HTML element that loads another HTML page within the document.
It essentially puts another webpage within the parent page. 
They are commonly used for advertisements, embedded videos, web analytics and interactive content.


39. What are the formatting tags in html?
HTML formatting tags change the appearance of text on a web page. They can make text bold, italic, underlined, or more. 
Examples of HTML formatting tags
Bold tag: The <b> tag makes text bold 
Italic tag: The <i> tag makes text italic 
Underline tag: The <u> tag underlines text 
Emphasis tag: The <em> tag emphasizes text in a paragraph 
Preformatted text tag: The <pre> tag displays text in a fixed-width font and preserves line breaks and spaces 
Span element: The <span> tag is a generic inline container that can be used to separate parts of text 




40. What is difference <b> and <Strong> in html
The element <b> creates the boldface without adding semantic significance to the text within it. 
Conversely, the tag <strong> emphasizes the importance of the text within its content. 



41. What is view port attribute in html

In HTML, the "viewport" attribute is a meta tag that instructs the browser how to control the dimensions and scaling of a web page on different devices
<meta name="viewport" content="width=device-width, initial-scale=1.0">. 


42. What is attribute in html?
HTML attributes provide additional information about HTML elements.
The <a> tag defines a hyperlink. The href attribute specifies the URL of the page the link goes to:
<a href="https://www.w3schools.com">Visit W3Schools</a>

43. What is block level element and inline element in html?

In HTML, a "block level element" always starts on a new line and takes up the full width available, 
while an "inline element" does not start on a new line and only occupies the space required by its content, 
essentially flowing with the surrounding text; 
examples of block elements include <p> (paragraph) and <div>, and examples of inline elements include <span> and <a> (link). 

44. What is difference between Html and Html5

Html                                                            Html5
no audio, video tags                                            Supports video and audio elements. 
                                                                <header>, <nav>, <main>, and <footer> to better define the structure and meaning of a webpage.                                                              
                                                                HTML5 is designed to be more responsive and adaptable to different screen sizes, making it better suited for mobile devices. 

Css Interview Question

45. What is difference between css and css3
CSS is the foundational Cascading Style Sheets language used to style web pages, 
while CSS3 is a newer version of CSS that introduces advanced features like animations, transitions, rounded corners, gradients, and more complex selectors, allowing for more dynamic and visually appealing web designs

46. What are the selector in css


47. What is media query in css
A "media query" in CSS is a technique that allows you to apply specific styles to a webpage based on certain conditions related to 
the user's device, like screen size, orientation, resolution, or other features.

48. What is different position in css
The position property specifies the type of positioning method used for an element (static, relative, fixed, absolute or sticky).

49. What is bom in css
"BOM" stands for "Browser Object Model," which refers to a collection of objects provided by a web browser that allows JavaScript to 
interact with the browser itself, including features like window manipulation, history access, and location changes; 
it is not directly related to CSS, but is used in conjunction with it through JavaScript to control the browser environment. 

50. What is difference between PX,unit,em,rem in css
In CSS, "px" stands for pixels, a fixed unit of measurement, while "em" and "rem" are relative units that scale based on the
font size of the parent element (em) or the root HTML element (rem), making "rem" generally preferred for consistent scaling across
a website; "unit" is a broader term referring to any measurement used in CSS, including pixels, ems, rems, percentages, etc. 


51. What is flex box in css
In CSS, "flexbox" (short for "flexible box layout") is a layout method that allows you to arrange elements in rows or columns, 
where items can dynamically grow or shrink to fit the available space within a container


52. What is pseudo selector in css
A "pseudo selector" in CSS refers to a keyword added to a regular selector that allows you to 
style an element based on its specific state or a particular part of it, without actually creating a new HTML element


53. How to make website responsive
Responsive web design is about creating web pages that look good on all devices!
A responsive web design will automatically adjust for different screen sizes and viewports.

54. What are breakpoint for viewport responsive device
Viewport breakpoints are browser dimensions that indicate when a website's layout and styling should change.

55. Why we use box-sizing in css
In CSS, "box-sizing" is used to control how the width and height of an element are calculated, 
allowing you to specify whether padding and borders should be included within the defined dimensions of an element,
making layout design more predictable and consistent, especially when applying padding and borders to multiple elements on a page. 

Javascript interview Question

56. What is Ecmascript in Javascript
ECMAScript is the standardized specification that defines the JavaScript programming language.
ECMAScript:
The standard upon which JavaScript is based. 
It provides the rules, syntax, and features that all JavaScript implementations must adhere to.

57. What is difference between let ,cons and var
While let and const are block-scoped, var declarations are either globally scoped or function-scoped. 
Let variables can be updated but not re-declared, 
const variables cannot be updated or re-declared, and var variables may both be updated and re-declared inside their scope.


58. What is spread operator, Rest operator , default parameter
Spread Operator (...)
Expands an iterable object (like an array, string, or object literal) into its individual elements.
Used to:
Concatenate arrays:
JavaScript

        const arr1 = [1, 2, 3];
        const arr2 = [4, 5, 6];
        const combined = [...arr1, ...arr2]; // [1, 2, 3, 4, 5, 6]


Rest Operator (...)
Collects multiple function arguments into an array.
Used to:
Create functions that accept a variable number of arguments:
JavaScript

        function printNumbers(first, second, ...rest) {
          console.log(first); // 1
          console.log(second); // 2
          console.log(rest); // [ 3, 4, 5 ]
        }
        printNumbers(1, 2, 3, 4, 5);


Default Parameter
Assigns a default value to a function parameter if no value or undefined is passed during the function call.
Used to:
Make functions more flexible and prevent errors when arguments are missing:
JavaScript

        function greet(name = "Guest") {
          console.log(`Hello, ${name}!`);
        }
        greet(); // Hello, Guest!
        greet("John"); // Hello, John!

59. What is deep copy and shallow copy in Javascript
In JavaScript, shallow copy and deep copy are two ways of creating a copy of an object or an array.

Shallow Copy:
A shallow copy creates a new object or array, but it only copies references to the nested objects or arrays.
Examples of shallow copy methods:
Spread operator (...).
JavaScript

  const original = [1, 2, [3, 4]];
  const shallowCopy = [...original];

  shallowCopy[2].push(5); 
  console.log(original); // [1, 2, [3, 4, 5]]

Deep Copy:
A deep copy creates a completely new object or array, including all nested objects and arrays.

Examples of deep copy methods:
JSON.parse(JSON.stringify()).
JavaScript

  const original = { a: 1, b: { c: 2 } };
  const deepCopy = JSON.parse(JSON.stringify(original));

  deepCopy.b.c = 3;
  console.log(original); // { a: 1, b: { c: 2 } } 



60. What is promise , callback function , async await in Javascript
Promises
    --------
        - Promises Establishes the communication between "producer" and "consumer".
 
        - Promises also called as "special javascript objects".
 
        - we will create Promises by using "Promise" class constructor.
 
        - Promises have 3 states
 
            1) success  (resolve)
 
            2) error    (reject)
 
            3) pending
 
        - we will consume promises by using "then()"

callbacks?  - Passing "one function" to "another function" as an argument called as "CallBack"

Async and Await()? To consume the promise we call async and await instead of then(). Latest released in ES9.

61. What is difference between promise and callback in Javascript
In JavaScript, both promises and callbacks are used to handle asynchronous operations, but they differ in their approach and syntax.

62. What is event bubbling and event capturing in Javascript
DOM elements are HTML Element. Parent , Child, Subchild.

Click Subchild -->Subchild, Child, Parent will execute.

The Events are propagating from down to top is called Event Bubbling.
Propagation of Events from top to bottom is called Event Capturing.

63. What is higher order function in Javascript

In JavaScript, a higher-order function is a function that: 
* Takes one or more functions as arguments, or
* Returns a function as its result.

Common Examples of Higher-Order Functions in JavaScript:
map(): Creates a new array by applying a function to each element of an existing array.
filter(): Creates a new array containing only the elements that pass a certain test specified by a function.
reduce(): Combines all the elements of an array into a single value using a function.
forEach(): Executes a function for each element in an array.
Example:
JavaScript

const numbers = [1, 2, 3, 4, 5];

// Using map() to double each number
const doubled = numbers.map(num => num * 2); 

console.log(doubled); // [2, 4, 6, 8, 10]

64. Explain different-2 types of function in Javascript?

Arrow Function:
Syntax.
JavaScript

const functionName = (parameters) => {
  // function body
};
Shorter syntax: Arrow functions provide a more concise syntax, especially for simple functions.

Generator Function:
Syntax.
JavaScript

function* functionName(parameters) {
  // function body with yield statements
}
Pausable Functions: Generator functions can be paused and resumed, allowing them to produce a sequence of values over time.



65. What is arrow function in Javascript?
In JavaScript, an arrow function is a concise way to write a function expression. It was introduced in ECMAScript 6 (ES6). 
Syntax:
JavaScript

(parameters) => { 
   // function body 
}


66. Why we use call, apply bind method in Javascript?

Call() -- if we want to create second memory location will interact with 1st memory location.

Apply – if we want to pass array instead of independent parameter

Bind() - merge memory location 1 and memory location 2 -->merge 2 memory locations-->new memory location.

67. How many way to create object in Javascript?

In JavaScript, there are several ways to create objects:
1. Object Literals:
This is the simplest and most common way to create an object.
JavaScript

const person = {
  name: "John",
  age: 30,
  greet: function() {
    console.log("Hello!");
  }
};

2. Constructor Functions:
This is a function that creates an object when called with the new keyword.
JavaScript

function Person(name, age) {
  this.name = name;
  this.age = age;
  this.greet = function() {
    console.log("Hello!");
  };
}

const john = new Person("John", 30);


68. What is prototype inheritance in Javascript?
Prototype inheritance is a fundamental concept in JavaScript that allows objects to inherit properties and methods from other objects. 


69. What is typescript?

TypeScript is a programming language that adds static typing to JavaScript.
It's a superset of JavaScript, which means you can write plain JavaScript with additional features. 

70. What are the array method , string method?
Array length
Array toString()
Array at()
Array join()
Array pop()
Array push()

Array shift()
Array unshift()
Array delete()
Array concat()
Array copyWithin()
Array flat()
Array splice()
Array toSpliced()
Array slice()

The splice() method can be used to add new items to an array.

The slice() method slices out a piece of an array into a new array.

71. What is difference between java and javascript

Java is a compiled, object-oriented programming language used to create applications that can run on a virtual machine, 
while JavaScript is a scripting language primarily used for adding interactivity to web pages within a browser

72. What is throttling and debouncing in js?

They are used to control the rate at which a function is executed in response to events like scrolling, resizing, or typing. 

Debouncing:
Purpose: Debouncing ensures that a function is only executed once after a certain period of inactivity. 
If the function is called again within that period, the timer is reset.

Throttling:
Purpose: Throttling limits the frequency at which a function is executed, ensuring that it's called at most once per a specified interval.

73. What is Null and undefined in javascript?
In JavaScript, null and undefined are two distinct primitive values that represent the absence of a value, but with different meanings:
Undefined:
Meaning: A variable has been declared but has not been assigned a value. It's the default value for uninitialized variables.
Example: 
JavaScript

  let x; 
  console.log(x); // Output: undefined


  Null:
Meaning: Represents the intentional absence of any object value. It's a deliberate assignment to indicate that a variable has no value.

Example:
JavaScript

  let y = null;
  console.log(y); // Output: null

74. What are the falsy values in javascript?

In JavaScript, the following values are considered falsy:
false, 0, -0, 0n (BigInt zero), "" (empty string), null, undefined, and NaN.
Any value that is not in this list is considered truthy.

75. What is execution context, event loop ,stack, call queue,microtask queue in Javascript

 Execution Context: An environment where JavaScript code is executed.
 Event Loop: The heart of JavaScript's concurrency model.
 Call Stack:A LIFO (Last In, First Out) data structure that tracks the execution of functions.
 Task Queue (Macrotask Queue): Holds tasks representing asynchronous operations like setTimeout, setInterval, I/O operations, and events.
 Microtask Queue: Holds tasks with higher priority than tasks in the task queue.


76. What is setTimeOut and setInterval in Javascript

setTimeout: Executes a function once after a specified delay (in milliseconds) and Syntax.
setInterval: Repeatedly executes a function at a specified interval (in milliseconds) and Syntax.

77. What is object.seal and object.freeze in Javascript?
In JavaScript, Object.seal() and Object.freeze() are methods used to control the mutability of objects:
Object.seal(): 

Prevents the addition or removal of properties.
Makes existing properties non-configurable (cannot change their attributes).
Allows modification of existing property values (if they are writable).


Object.freeze():
Prevents the addition or removal of properties.
Makes existing properties non-configurable.
Makes existing properties non-writable (cannot change their values).


78. What is difference between map and set in Javascript
Map is a collection of ordered key/value pairs, and that a Set is a collection of unique values.

79. What is Weakmap and Weakset in Javascript

WeakMap()-->Takes JSON objects as keys
Set()->Will not allow the duplicate values.
WeakSet()-->Takes JSON objects as keys.

80. What is sessionStorage, localStorage , cookie?

In web development, "sessionStorage", "localStorage", and "cookie" are all mechanisms used to store data on a user's browser, 
but they differ in terms of data persistence: 
sessionStorage stores data temporarily within a single browser session, 
localStorage stores data persistently across browser sessions, 
and cookies are small data files that can be configured to persist for a set duration and are often used to track user 
activity across different pages on a website; with cookies being the only option that can be sent to the server with every request.

81. Write a program to sort an array

function bubbleSort(arr) {
  for (let i = 0; i < arr.length - 1; i++) {
    for (let j = 0; j < arr.length - i - 1; j++) {
      if (arr[j] > arr[j + 1]) {
        // Swap elements
        let temp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = temp;
      }
    }
  }
  return arr;
}

const arr = [5, 2, 8, 1, 9];
console.log(bubbleSort(arr)); // Output: [1, 2, 5, 8, 9]
Explanation:
bubbleSort Function:
Takes an array as input.
Iterates through the array multiple times, comparing adjacent elements.
If an element is greater than the next one, it swaps them.
This process continues until the entire array is sorted.
arr Variable:
Holds the array to be sorted.
console.log:
Prints the sorted array to the console.

82. What is use of json.stringify and json parse() method in Javascript
In JavaScript, JSON.stringify() and JSON.parse() are used to convert data between JavaScript objects and JSON (JavaScript Object Notation) strings.

83. What are is map, filter , reducer in javascript
In JavaScript, map, filter, and reduce are array methods that allow you to iterate over an array and perform transformations or computations on its elements.
1. Map:
Purpose: Creates a new array by applying a function to each element of the original array.
Syntax: array.map(callback(element, index, array))

2. Filter:
Purpose: Creates a new array containing elements that pass a test specified by a callback function.
Syntax: array.filter(callback(element, index, array))

3. Reduce:
Purpose: Reduces an array to a single value by applying a callback function to each element and accumulating the result.
Syntax: array.reduce(callback(accumulator, currentValue, index, array), initialValue)

84. What is generator function in Javascript?

In JavaScript, a generator function is a special type of function that can pause and resume its execution, 
allowing you to generate a sequence of values on demand.

85. How to stop event propagation in Javascript

To stop event propagation in JavaScript, you can use the stopPropagation() method on the event object:
JavaScript

function handleClick(event) {
  // Do something with the event

  // Prevent the event from bubbling up to parent elements
  event.stopPropagation();
}

86. What is closure in Javascript?
    Closure
    -------
        - if any inner function holding the outer function data, then such scenario called as closure.
        <script>
    function fun_one(){
        var x = 10;
        var y = 20;
        return ()=>{
            console.log(x);
            console.log(y);
        }
    };
    console.dir( fun_one() );  //0: Closure (fun_one) {x: 10, y: 20}
  
</script>


87. What is hoisting in Javascript ?

Hoisting is a JavaScript mechanism where variable and function declarations are moved to the top of their scope before code execution. 

Variable Hoisting:
With var, the declaration is hoisted, but the assignment is not.
JavaScript

    console.log(x); // Output: undefined
    var x = 5;

Function Hoisting:
Function declarations are fully hoisted. This means you can call a function before it's defined in your code.
JavaScript

    sayHello(); // Output: "Hello!"

    function sayHello() {
      console.log("Hello!");
    }


88. What is dead zone in Javascript ?

In JavaScript, the "dead zone" refers to the Temporal Dead Zone (TDZ). 
It's a behavior associated with variables declared using let and const.
Scope:
The TDZ exists within the scope of a variable declared with let or const. 
It starts from the beginning of the scope and ends when the variable is declared and initialized.

89. What is function currying in Javascript?

• converting the complex level business logic to readable code is called currying.
• loosely coupled code is nothing but currying.
* converting tighlty couple code to easily readeable code is currying.

90. What is mutation observer in Javascript?

In JavaScript, a MutationObserver is an API that allows you to watch for changes being made to the DOM tree. 
It provides a way to react to changes like:
Node addition or removal: When elements are added or removed from the DOM.
Attribute changes: When an attribute of an element is modified.
Text content changes: When the text content of a node is altered.

91. What is memoization in javascript?
Memoization is an optimization technique in JavaScript that can significantly improve the performance of your code, 
especially when dealing with computationally expensive or frequently called functions.


92. Write a program to find element occurence in
array
const arr = [1,1,2,3,1,4]
const count = {};
for (const element of arr) {
if (count[element]) {
count[element] += 1;
} else {
count[element] = 1;
}
}
console.log(count); // 👉️ {1: 3, 2: 1, 3: 2}
● Write a program to remove duplicate item
from array
const arr = [1,2,3,4,1,2];
const b=[];
for(let i=0;i<arr.length;i++){
if(b.indexOf(arr[i]) == -1){
b.push(arr[i])
}
}
console.log("removed array value",b)
const arr = [1,2,3,4,1,2];
const b=[];
arr.filter((dup)=>{
if(b.indexOf(arr[dup]) == -1){
b.push(arr[dup])
} })
console.log("removed array value",b)
● What will be output of that code
Const firstname = fun();
Let name = ‘vivek’
Function fun(){
Return `my is ${name} malviya`
}
console.log(firstname);
● Write a program for following output
console.log("output with normal function",mul(2)(4)(6))
function mul(a) {
return function (b) {
return function (c) {
return a * b * c;
};
};
}
console.log("output with normal function", mul(2)(4)(6));
● Write a program for following output using
arrow function
const call = (a) => {
return (b) => {
return (c) => {
return a * b * c;
};
};
};
console.log("output with arrow function", mul(2)(4)(6));
● Write a program return resolve if value is
less than 5 using Promise
●
function fun(a){
let myPromise = new Promise((myResolve, myReject)=> {
let x = 0;
// The producing code (this may take some time)
if (a < 7) {
myResolve(`number is given ${a}`);
} else {
myReject("Error");
}
});
myPromise.then((result)=>{
console.log(result)
})
}
fun(5);
● What will be output for this program ?
for (let i = 0; i < 5; i++) {
setTimeout(function () {
console.log(i);
}, i * 1000);
}
And
for (var i = 0; i < 5; i++) {
setTimeout(function () {
console.log(i);
}, i * 1000);
}
● Write a program to multiply two number
without using multiply Sign in Javascript
function multiplay(a, b) {
let answer = a;
for (let i = 0; i < b - 1; i++) {
answer += a;
}
return answer;
}
console.log(multiplay(5, 3));
● Write a program sorting in javascript
const arr = [3,2,5,4,1,0]
for (let i = 0; i < arr.length; i++) {
for (let j = i+1; j < arr.length; j++) {
if(arr[i] < arr[j]) {
let temp = arr[i];
arr[i] = arr[j];
arr[j] = temp;
}
}
}
console.log("Elements of array sorted in ascending order:");
for (let i = 0; i < arr.length; i++) {
console.log("Elements of array sorted in ascending order",
arr[i]);
}
● What will be output ?
var num = 4;
function outer() {
var num = 2;
function inner() {
num++;
var num = 3;
console.log("num", num);
}
inner();
}
outer();
function sayHi() {
return (() => 0)();
}
● What's the console output of?
const a = {};
const b = { key: 'b' };
const c = { key: 'c' };
a[b] = 123;
a[c] = 456;
console.log(a[c]);
Answer : -
Object keys are automatically converted into strings.
We are trying to set an ***object as a key*** to object a, with the
value of 123.
However, when we stringify an object, it becomes "[object
Object]".
So what we are saying here, is that a["[object Object]"] = 123.
Then,
we can try to do the same again.
c is another object that we are implicitly stringifying.
So then, a["[object Object]"] = 456. Then, we log a[b],
which is actually a["[object Object]"].
We just set that to 456, so it returns 456. */
● Write a program to make polyfill for map method
in javascript
Array.prototype.mymap = function (cb) {
let temp = [];
for (let i = 0; i < this.length; i++) {
temp.push(cb(this[i]));
}
return temp;
};
const arr = [2, 3, 4, 5];
const result = arr.mymap((num) => {
return num * 5;
});
console.log("result", result);
● Write a program to make polyfill for filter
method in javascript
Array.prototype.myFilter = function (cb) {
let temp = [];
for (let i = 0; i < this.length; i++) {
if (cb(this[i], i, this)) temp.push(cb(this[i]));
}
return temp;
};
const arr = [2, 3, 4, 5];
console.log("arr", arr);
const data = arr.filter((num) => {
return num > 2;
});
console.log("resultnumber", data);
● Write a program to make polyfill for reduce
method in javascript
Array.prototype.myReducer = function (cb, initialValue) {
var accumulator = initialValue;
for (i = 0; i < this.length; i++) {
accumulator = accumulator ? cb(this[i], i, this) : this[i];
}
return accumulator;
};
const arr = [2, 3, 4, 5];
const sumOfArray = arr.myReducer((accu, curr, index, arr) => {
return (accu += curr);
}, 0);
console.log("polyfil", sumOfArray);
